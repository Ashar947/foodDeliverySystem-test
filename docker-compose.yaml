version: '2'

services:
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"
    networks:
      - my-network
  kafka:
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    networks:
      - my-network
  orders:
    build:
      context: .
      dockerfile: ./apps/orders/Dockerfile
    command: yarn start:dev orders
    env_file: 
      - './apps/orders/.env'    
    ports:
      - "3005:3005"
    volumes:
      - ".:/usr/src/app"
    networks:
      - my-network
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    command: yarn start:dev auth
    env_file: 
      - './apps/auth/.env'    
    ports:
      - "3000:3000"
    volumes:
      - ".:/usr/src/app"
    networks:
      - my-network
  restaurant:
    build:
      context: .
      dockerfile: ./apps/restaurant/Dockerfile
    command: yarn start:dev restaurant
    env_file: 
      - './apps/restaurant/.env'    
    ports:
      - "3002:3002"
    volumes:
      - ".:/usr/src/app"
    networks:
      - my-network
  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
    command: yarn start:dev notifications
    ports:
      - "3006:3006"
    volumes:
      - ".:/usr/src/app"
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
